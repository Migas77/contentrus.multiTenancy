apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  annotations:
    workflows.argoproj.io/description: Deploy Argo Workflow!".
    workflows.argoproj.io/maintainer: '@belchior'
  generateName: deploy-wf
spec:
  
  # This is the entrypoint of the workflow. (the template that will be executed first)
  entrypoint: steps-template
  arguments:
    parameters:
    - name: tenantId
  volumes:
  - name: github-creds-vol
    secret:
      secretName: github-creds
      items:
      - key: ssh-private-key
        path: id_rsa

  templates:
  
  # Template Invocators
  - name: steps-template
    steps:
    - - name: set-tenant-namespace-and-secrets
        template: tenant-namespace-and-secrets-script
    - - name: set-tenant-azureblob-credentials
        template: tenant-azureblob-credentials-script
    - - name: trigger-tenant-application-set
        template: tenant-git-commit-script
    
  # Template Definitions
  - name: tenant-namespace-and-secrets-script
    inputs:
      parameters:
      - name: tenantId
        value: "{{workflow.parameters.tenantId}}"
    script:
      image: bitnami/kubectl:1.33.1@sha256:a7413d1c7d19bb4b8d739ee5f9d6b806e94effa180bfd4a221d5874c00821a2c
      command: [bash]
      source: |
        #!/bin/bash
        set -e

        echo "TenantId {{inputs.parameters.tenantId}}..."

        NAMESPACE="t{{inputs.parameters.tenantId}}"

        kubectl create namespace $NAMESPACE || echo "Namespace already exists"

        ROOT_PASSWORD=$(head /dev/urandom | tr -dc 'A-Za-z0-9_' | head -c 24)

        kubectl create secret generic mysql-secrets \
          --from-literal=mysql-root-password=$ROOT_PASSWORD \
          --from-literal=mysql-replication-password=$(head /dev/urandom | tr -dc 'A-Za-z0-9_' | head -c 24) \
          --from-literal=mysql-password=$(head /dev/urandom | tr -dc 'A-Za-z0-9_' | head -c 24) \
          -n $NAMESPACE

        kubectl create secret generic piranha \
          --from-literal=connection-string="Server=$NAMESPACE-mysql;Database=piranha;User=root;Password=$ROOT_PASSWORD;Port=3306" \
          -n $NAMESPACE

  - name: tenant-azureblob-credentials-script
    inputs:
        parameters:
        - name: tenantId
          value: "{{workflow.parameters.tenantId}}"
    script:
      image: k3d-registry:5000/az-cli-kubectl:latest
      command: [bash]
      env:
        - name: AZURE_USERNAME
          valueFrom:
            secretKeyRef:
              name: azure-cred-secret
              key: username
        - name: AZURE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: azure-cred-secret
              key: password
      source: |
        #!/bin/bash
        set -euo pipefail

        az login -u $AZURE_USERNAME -p $AZURE_PASSWORD

        STORAGE_ACCOUNT_NAME="contentrustenants"
        RESOURCE_GROUP="contentrus"
        TENANT_NAME="tenant{{inputs.parameters.tenantId}}"
        NAMESPACE="t{{inputs.parameters.tenantId}}"

        echo "${TENANT_NAME} on namespace ${NAMESPACE}..."

        if [[ ${#TENANT_NAME} -lt 3 || ${#TENANT_NAME} -gt 63 ]]; then
          echo "Error: Tenant name after sanitization must be between 3 and 63 characters."
          exit 1
        fi

        # Get storage account key
        STORAGE_KEY=$(az storage account keys list \
          --resource-group "$RESOURCE_GROUP" \
          --account-name "$STORAGE_ACCOUNT_NAME" \
          --query '[0].value' -o tsv)

        # Check if container exists
        if az storage container exists \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --account-key "$STORAGE_KEY" \
            --name "$TENANT_NAME" \
            -o tsv | grep -q true; then
          echo "Container '$TENANT_NAME' already exists. Exiting successfully."
          exit 0
        fi

        # Create container
        echo "Creating container '$TENANT_NAME'..."
        az storage container create \
          --account-name "$STORAGE_ACCOUNT_NAME" \
          --account-key "$STORAGE_KEY" \
          --name "$TENANT_NAME" \
          --public-access off

        echo "Container '$TENANT_NAME' created."

        # Generate expiry date 5 days from now
        EXPIRY_DATE=$(python3 -c "from datetime import datetime, timedelta; print((datetime.utcnow() + timedelta(days=365)).strftime('%Y-%m-%dT%H:%MZ'))")

        # Generate SAS token scoped to container
        SAS_TOKEN=$(az storage container generate-sas \
          --account-name "$STORAGE_ACCOUNT_NAME" \
          --account-key "$STORAGE_KEY" \
          --name "$TENANT_NAME" \
          --permissions rwdl \
          --expiry "$EXPIRY_DATE" \
          --https-only \
          -o tsv)

        kubectl create secret generic azureblob-credentials \
          --from-literal=sas-token="$SAS_TOKEN" \
          --from-literal=expiry-date="$EXPIRY_DATE" \
          -n $NAMESPACE
  
  - name: tenant-git-commit-script
    inputs:
      parameters:
      - name: tenantId
        value: "{{workflow.parameters.tenantId}}"
    script:
      image: alpine/git:2.47.1@sha256:ec9ce19e30e68365398ec07a30f744439fcad1bd7cae33122871b868cf2c6cee
      command: [sh]
      volumeMounts:
        - name: github-creds-vol
          mountPath: /root/.ssh/
      source: |
        #!/bin/sh
        set -e

        mkdir /.ssh/
        cp /root/.ssh/id_rsa /.ssh/id_rsa
        chmod 600 /.ssh/id_rsa

        export GIT_SSH_COMMAND="ssh -i /.ssh/id_rsa -o StrictHostKeyChecking=no"

        git clone git@github.com:Migas77/contentrus.multiTenancy.argocdHelmCharts.git

        cd contentrus.multiTenancy.argocdHelmCharts/tenants
        mkdir t{{inputs.parameters.tenantId}}
        cd t{{inputs.parameters.tenantId}}
        touch values.yaml

        git config --add --local user.name "Argo Workflow Bot"
        git config --add --local user.email "bot@argo.pt"

        git add values.yaml
        git status
        git commit -m "Tenant {{inputs.parameters.tenantId}} created"
        git status
        git push origin main

